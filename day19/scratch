I have currently made a lot of progress on this puzzle; but it is still a tricky bugger.

So far, I have managed to:
    - Determine shared beacons between pairs of scanners, and use this information to determine the relative position of a scanner (relative to its pair). 
    - The programme works for 19.ex if you only consider scanners 0 and 1. They both have 25 beacons, with 12 overlaps. So the correct amount is 38 total beacons ( 25 * 2 - 12 ) beacons, with 12 overlaps. So the correct amount is 38 total beacons ( 25 * 2 - 12 )

The tricky part comes in considering beacons that are only indirectly related to scanner 0, which is our (0, 0, 0)

In terms of shared beacons, you can map out the scanners like this:

 0-- 1 -- 3
      \
       `-- 4 -- 2

Where a line indicates that their relative positions can be determined (due to having 12 overlapping beacons).

The moment I try and include scanner 4, which is only indirectly related to 0, the code breaks. 
In total, between those three scanners, there are 76 reported beacons.

But in terms of unique beacons, there should be 76 - 12 - 6 = 58 beacons, since 12 overlap between 1 and 0, and of those 12, 6 are repeated in scanner 4's report.

However, when I run the script on scanners 0, 1 and 4, I get 64 beacons, which means that the reorientation of scanner 4's beacons to be relative to scanner 0 is failing.

I have been trying to reorient and shift a single point from scanner 4's perspective to scanner 0 perspective.

This point, which is common to scanners 0, 1 and 4 is:

B4 = (-660, -479, -426) from scanner 4's perspective
B1 = (-391, 539, -444) from scanner 1's perspective
B0 = (459, -707, 401) - from scanner 0's perspective

My current approach is to try and manually reorient this point to be from scanner 0's perspective.

First, I am simply going to try and convert B1 to B0, using the information about relative position and orientation I have gathered during the processing of the beacons.

This works! I simply do the reverse rotation steps, and shift by scanner 1's position (relative to 0).

And now I am going to do the exact same thing for B4. Given that the B1 -> B0 step works, I just need to do B4 -> B1, which you would think would be exactly the same!

Ah I have made some progress! Instead of unrolling and unturning, all you had to do was roll and turn. There is some feature of the scanner 0 and scanner 1 relative orientations that mean that unroll/unturn sequence was equivalent to the roll/turn sequence. But now using rollAndTurn instead of unrollAndUnturn, I can successfully reorient and reposition B4 to be relative to scanner 0's position.

Part one is complete! Part two is about calculating the maximum manhattan distances between scanners. This is easy enough, once you have all the scanners position relative to a reference point (scanner 0's position), then all you need to do is iterate over all possible pairs of scanners and calculate the distances, recording the maximum.

What I am struggling with is getting all the scanners to be relative to scanner 0. So these are the possibilities:

if the scanner is scanner 0, then you're done, it's position is (0, 0, 0)
if the scanner is a neighbour to scanner zero, then you're also done, it's relative position is already stored in the scanners table.

otherwise, it requires some rotation and shifting.

Take scanner 4 as a working example:

The sequence of relations is 4 -> 1 -> 0

You take the position of scanner 4 relative to scanner 1, rotate it such that its orientation is the same as scanner 0, and shift it by scanner 1's position relative to zero.

So even though scanner 4 is two steps away from scanner 0, to calculate its relative position is only one step.

But I'm struggling to generalize this.

Take scanner 2 as another example:

The sequence is 2 -> 4 -> 1 -> 0

This should take two steps.

Step 1: 
Take the position of scanner 2 relative to scanner 4
Rotate it so that its orientation is the same as scanner 1
Shift it by scanner 4's position relative to scanner 1

Step 2:
Take the position you just found (which is now the position of scanner 2 relative to scanner 1)
Rotate it so that the orientation is the same as scanner 0 (which you know because scanner 1 is a neighbour to scanner 0)
Shift it by scanner 1's position relative to zero
